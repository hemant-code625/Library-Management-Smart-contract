const hre = require("hardhat");
const fs = require("fs");
const path = require("path");

async function booksInLibrary(library) {
  console.log("\n--- Current Books in Library ---");
  for (let i = 1; i <= 3; i++) {
    let book = await library.getBook(i);
    console.log(`Book ${i}:`, book);
  }
}

async function main() {
  const [deployer, user1] = await hre.ethers.getSigners();

  console.log("Using deployer:", deployer.address);
  console.log("Using user1:", user1.address);

  // Load from deployed.json generated by deploy.js in the parent directory
  const deployedPath = path.join(__dirname, "..", "deployed.json");
  if (!fs.existsSync(deployedPath)) {
    throw new Error(
      `deployed.json not found at ${deployedPath}. Please run scripts/deploy.js first.`
    );
  }
  const deployedData = JSON.parse(fs.readFileSync(deployedPath));
  const deployedAddress = deployedData.Library;

  const Library = await hre.ethers.getContractFactory("Library");
  const library = await Library.attach(deployedAddress);

  console.log("\n--- Adding Books ---");

  let tx1 = await library.addBook("Blockchain Basics");
  let receipt1 = await tx1.wait();
  console.log(
    "ðŸ“š BookAdded â†’",
    receipt1.logs.map((log) => library.interface.parseLog(log))[0].args
  );

  let tx2 = await library.addBook("Smart Contracts 101");
  let receipt2 = await tx2.wait();
  console.log(
    "ðŸ“š BookAdded â†’",
    receipt2.logs.map((log) => library.interface.parseLog(log))[0].args
  );

  let b3 = await library.addBook("Decentralized Applications Guide");
  let r3 = await b3.wait();
  console.log(
    "ðŸ“š BookAdded â†’",
    r3.logs.map((log) => library.interface.parseLog(log))[0].args
  );

  await booksInLibrary(library);

  console.log("\n--- User1 issues Book 3 ---");
  let tx3 = await library.connect(user1).issueBook(3);
  let receipt3 = await tx3.wait();
  console.log(
    "ðŸ“– BookIssued â†’",
    receipt3.logs.map((log) => library.interface.parseLog(log))[0].args
  );

  book1 = await library.getBook(1);
  console.log("Book 1 after issuing:", book1);

  await booksInLibrary(library);

  console.log("\n--- User1 returns Book 3 ---");
  let tx4 = await library.connect(user1).returnBook(3);
  let receipt4 = await tx4.wait();
  console.log(
    "ðŸ”„ BookReturned â†’",
    receipt4.logs.map((log) => library.interface.parseLog(log))[0].args
  );

  book1 = await library.getBook(1);
  console.log("Book 1 after returning:", book1);
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
